GET  /                       controllers.Application.index()

# Sitemap
GET  /sitemap.xml           controllers.Application.sitemap()

# RSS feeds
GET  /feed/:feedType            controllers.Application.getFeed(feedType: String)

# User accounts
GET /user/all                 controllers.Application.listUsers()
GET /user/i/:userName         controllers.Application.viewAccount(userName)

# Browse (use query string for tags, text search ‘q’ and sorting on top of these)
GET  /modules/mine                      controllers.Modules.myModules()

# Note that featured/popular/rating are just sort params - the three entries below need revising for this
#GET  /modules/featured                  controllers.Modules.getModules(ofType = "featured")
#GET  /modules/popular                   controllers.Modules.getModules(ofType = "popular")
#GET  /modules/top-rated                 controllers.Modules.getModules(ofType = "top")

# e.g. /modules/play-1, /modules/play-1.2, /modules/play-1.2.4
GET  /modules/play-:version             controllers.Modules.getModulesByPlayVersion(version: String)
# e.g. /modules/play-1/latest, /modules/play-1.2/latest
GET   /modules/play-:version/latest     controllers.Modules.getLatestModulesByPlayVersion(version: String)
# e.g. /modules/play-1/rating, /modules/play-1.2/rating
GET   /modules/play-:version/rating     controllers.Modules.getHighestRatedModulesByPlayVersion(version: String)
# e.g. /modules/play-1/featured, /modules/play-1.2/featured
GET   /modules/play-:version/featured   controllers.Modules.getFeaturedModulesByPlayVersion(version: String)

# e.g. /modules/play-1.2.4/view-templates
#GET  /modules/play-:version/:category   controllers.Modules.getModulesByCategory(version: String, category: String)
# e.g. /modules/view-templates
#GET  /modules/:category                 controllers.Modules.getModulesByCategory(version = "*", category: String)

# Submit module - changed the URL slightly because the showModuleRegistrationForm was conflicting with modules/:category
GET  /modules/my/register               controllers.Modules.showModuleRegistrationForm()
POST /modules/my/register               controllers.Modules.submitModuleRegistrationForm()
GET  /modules/my/:moduleKey             controllers.Modules.showModuleEditForm(moduleKey: String)
POST /modules/my/:moduleKey             controllers.Modules.submitModuleEditForm(moduleKey: String)
GET  /modules/my/versions/:moduleKey    controllers.Modules.showVersionManagement(moduleKey: String)
POST /modules/my/versions/:moduleKey    controllers.Modules.uploadNewVersion(moduleKey: String)
POST /modules/my/versions/i/delete      controllers.Modules.deleteVersion()

# Administrators’ interface
GET  /admin/versions                    controllers.PlayVersions.showPlayVersions()
POST /admin/versions                    controllers.PlayVersions.addNewPlayVersion()
POST /admin/versions/update             controllers.PlayVersions.update()
GET  /admin/categories                  controllers.Categories.showCategories()
POST /admin/categories                  controllers.Categories.addNewCategory()
POST /admin/categories/update           controllers.Categories.update()
GET  /admin/category/:categoryName      controllers.Categories.categoryDetails(categoryName: String)
GET  /admin/featured                    controllers.FeaturedModules.showFeaturedModules()
POST /admin/featured                    controllers.FeaturedModules.addNewFeaturedModule()
POST /admin/featured/update             controllers.FeaturedModules.update()
POST /admin/featured/delete             controllers.FeaturedModules.delete()
GET  /admin/users                       controllers.Users.getUsers()
POST /admin/users/:id/switchAdmin           controllers.Users.switchAdmin(id: Long)


# SecureSocial
# NOTE: Don't put paths below Module details or there is a conflict
# ~~~~~
# Login page
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout

# User Registration and password handling
GET     /signup                     securesocial.controllers.Registration.startSignUp
POST    /signup                     securesocial.controllers.Registration.handleStartSignUp
GET     /signup/:token              securesocial.controllers.Registration.signUp(token)
POST    /signup/:token              securesocial.controllers.Registration.handleSignUp(token)
GET     /reset                      securesocial.controllers.Registration.startResetPassword
POST    /reset                      securesocial.controllers.Registration.handleStartResetPassword
GET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)
POST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)
GET     /password                   securesocial.controllers.PasswordChange.page
POST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
GET     /not-authorized             securesocial.controllers.ProviderController.notAuthorized

# ~~~~~


# Module details (the /module/ part is mandatory or we have issues with other components of the app)
GET  /module/:moduleKey                        controllers.Modules.details(moduleKey: String)
POST /module/:moduleKey/voteUp                 controllers.Modules.voteUp(moduleKey: String)
POST /module/:moduleKey/voteDown               controllers.Modules.voteDown(moduleKey: String)
POST /module/:moduleKey/ratings                controllers.Modules.rate(moduleKey: String)

# Map static resources from the /public folder to the /assets URL path
GET  /assets/*file           controllers.Assets.at(path="/public", file)

